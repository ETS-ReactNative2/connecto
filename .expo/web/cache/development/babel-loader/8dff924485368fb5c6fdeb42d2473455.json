{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport Constants from \"expo-constants\";\nimport { useState } from \"react\";\nimport axios from \"axios\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport Keyboard from \"react-native-web/dist/exports/Keyboard\";\nimport TouchableWithoutFeedback from \"react-native-web/dist/exports/TouchableWithoutFeedback\";\nimport { Button, TextInput, Card, Title, Paragraph, useTheme } from \"react-native-paper\";\nimport { CONSTANTS } from \"../constants/DataConstants\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nvar EventSearch = function EventSearch(_ref) {\n  var navigation = _ref.navigation;\n\n  var _useTheme = useTheme(),\n      colors = _useTheme.colors;\n\n  var styles = StyleSheet.create({\n    container: {\n      backgroundColor: \"#fff\",\n      padding: \"4%\"\n    },\n    welcomeMessageText: {\n      fontWeight: \"bold\",\n      fontSize: 24,\n      textAlign: \"center\",\n      width: \"100%\",\n      marginTop: Constants.statusBarHeight * 2\n    },\n    searchButton: {\n      width: \"50%\",\n      alignSelf: \"center\",\n      marginTop: 10\n    },\n    searchBox: {\n      marginTop: 40,\n      width: 240,\n      alignSelf: \"center\"\n    },\n    cardContainer: {\n      marginTop: 20,\n      borderRadius: 10,\n      elevation: 8,\n      borderColor: colors.primary,\n      borderStyle: \"solid\",\n      borderWidth: 1\n    },\n    cardCover: {\n      marginTop: 8,\n      width: \"50%\",\n      alignSelf: \"center\"\n    }\n  });\n\n  var _useState = useState(\"\"),\n      _useState2 = _slicedToArray(_useState, 2),\n      searchInput = _useState2[0],\n      setSearchInput = _useState2[1];\n\n  var _useState3 = useState([]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      eventList = _useState4[0],\n      setEventList = _useState4[1];\n\n  var fetchSearchResults = function fetchSearchResults() {\n    Keyboard.dismiss();\n    console.log(\"fetching now...\");\n    var searchTerm = searchInput.replace(\" \", \"+\");\n    console.log(searchTerm);\n    var url = CONSTANTS.serpApiP1 + searchTerm + CONSTANTS.serpApiP2;\n    axios.get(url).then(function (response) {\n      var data = response.data.events_results;\n      setEventList(data);\n    }).catch(function (error) {\n      console.log(error);\n    });\n  };\n\n  return _jsx(TouchableWithoutFeedback, {\n    onPress: Keyboard.dismiss,\n    accessible: false,\n    children: _jsxs(ScrollView, {\n      style: styles.container,\n      children: [_jsx(Text, {\n        style: styles.welcomeMessageText,\n        children: \"Welcome! Search for an event below!\"\n      }), _jsx(TextInput, {\n        label: \"Search Event\",\n        value: searchInput,\n        placeholder: \"enter event...\",\n        style: styles.searchBox,\n        onChangeText: function onChangeText(text) {\n          return setSearchInput(text);\n        }\n      }), _jsx(Button, {\n        mode: \"outlined\",\n        style: styles.searchButton,\n        onPress: fetchSearchResults,\n        children: \"Search\"\n      }), eventList.map(function (event, idx) {\n        return _jsx(Card, {\n          style: styles.cardContainer,\n          children: _jsxs(Card.Content, {\n            style: styles.cardContent,\n            children: [_jsx(Title, {\n              children: event.title\n            }), _jsx(Paragraph, {\n              children: event.description\n            }), _jsx(Card.Cover, {\n              style: styles.cardCover,\n              source: {\n                uri: \"\" + (event == null ? void 0 : event.thumbnail)\n              }\n            })]\n          })\n        }, idx);\n      })]\n    })\n  });\n};\n\nexport default EventSearch;","map":{"version":3,"sources":["C:/Users/James/Desktop/ConnectO/connecto/src/views/EventSearch.js"],"names":["Constants","useState","axios","Button","TextInput","Card","Title","Paragraph","useTheme","CONSTANTS","EventSearch","navigation","colors","styles","StyleSheet","create","container","backgroundColor","padding","welcomeMessageText","fontWeight","fontSize","textAlign","width","marginTop","statusBarHeight","searchButton","alignSelf","searchBox","cardContainer","borderRadius","elevation","borderColor","primary","borderStyle","borderWidth","cardCover","searchInput","setSearchInput","eventList","setEventList","fetchSearchResults","Keyboard","dismiss","console","log","searchTerm","replace","url","serpApiP1","serpApiP2","get","then","response","data","events_results","catch","error","text","map","event","idx","cardContent","title","description","uri","thumbnail"],"mappings":"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","sourcesContent":["import Constants from \"expo-constants\";\r\nimport { useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport {\r\n\tStyleSheet,\r\n\tText,\r\n\tScrollView,\r\n\tKeyboard,\r\n\tTouchableWithoutFeedback,\r\n} from \"react-native\";\r\nimport {\r\n\tButton,\r\n\tTextInput,\r\n\tCard,\r\n\tTitle,\r\n\tParagraph,\r\n\tuseTheme,\r\n} from \"react-native-paper\";\r\nimport { CONSTANTS } from \"../constants/DataConstants\";\r\n\r\nconst EventSearch = ({ navigation }) => {\r\n\tconst { colors } = useTheme();\r\n\tconst styles = StyleSheet.create({\r\n\t\tcontainer: {\r\n\t\t\tbackgroundColor: \"#fff\",\r\n\t\t\tpadding: \"4%\",\r\n\t\t},\r\n\t\twelcomeMessageText: {\r\n\t\t\tfontWeight: \"bold\",\r\n\t\t\tfontSize: 24,\r\n\t\t\ttextAlign: \"center\",\r\n\t\t\twidth: \"100%\",\r\n\t\t\tmarginTop: Constants.statusBarHeight * 2,\r\n\t\t},\r\n\t\tsearchButton: {\r\n\t\t\twidth: \"50%\",\r\n\t\t\talignSelf: \"center\",\r\n\t\t\tmarginTop: 10,\r\n\t\t},\r\n\t\tsearchBox: {\r\n\t\t\tmarginTop: 40,\r\n\t\t\twidth: 240,\r\n\t\t\talignSelf: \"center\",\r\n\t\t},\r\n\t\tcardContainer: {\r\n\t\t\tmarginTop: 20,\r\n\t\t\tborderRadius: 10,\r\n\t\t\televation: 8,\r\n\t\t\tborderColor: colors.primary,\r\n\t\t\tborderStyle: \"solid\",\r\n\t\t\tborderWidth: 1,\r\n\t\t},\r\n\t\tcardCover: {\r\n\t\t\tmarginTop: 8,\r\n\t\t\twidth: \"50%\",\r\n\t\t\talignSelf: \"center\",\r\n\t\t},\r\n\t});\r\n\r\n\tconst [searchInput, setSearchInput] = useState(\"\");\r\n\tconst [eventList, setEventList] = useState([]);\r\n\r\n\tconst fetchSearchResults = () => {\r\n\t\tKeyboard.dismiss();\r\n\t\tconsole.log(\"fetching now...\");\r\n\t\tconst searchTerm = searchInput.replace(\" \", \"+\");\r\n\t\tconsole.log(searchTerm);\r\n\t\tconst url = CONSTANTS.serpApiP1 + searchTerm + CONSTANTS.serpApiP2;\r\n\t\taxios\r\n\t\t\t.get(url)\r\n\t\t\t.then((response) => {\r\n\t\t\t\t// console.log(response.data.events_results);\r\n\t\t\t\tlet data = response.data.events_results;\r\n\t\t\t\tsetEventList(data);\r\n\t\t\t})\r\n\t\t\t.catch((error) => {\r\n\t\t\t\tconsole.log(error);\r\n\t\t\t});\r\n\t};\r\n\r\n\treturn (\r\n\t\t<TouchableWithoutFeedback onPress={Keyboard.dismiss} accessible={false}>\r\n\t\t\t<ScrollView style={styles.container}>\r\n\t\t\t\t<Text style={styles.welcomeMessageText}>\r\n\t\t\t\t\tWelcome! Search for an event below!\r\n\t\t\t\t</Text>\r\n\t\t\t\t<TextInput\r\n\t\t\t\t\tlabel=\"Search Event\"\r\n\t\t\t\t\tvalue={searchInput}\r\n\t\t\t\t\tplaceholder=\"enter event...\"\r\n\t\t\t\t\tstyle={styles.searchBox}\r\n\t\t\t\t\tonChangeText={(text) => setSearchInput(text)}\r\n\t\t\t\t/>\r\n\t\t\t\t<Button\r\n\t\t\t\t\tmode=\"outlined\"\r\n\t\t\t\t\tstyle={styles.searchButton}\r\n\t\t\t\t\tonPress={fetchSearchResults}\r\n\t\t\t\t>\r\n\t\t\t\t\tSearch\r\n\t\t\t\t</Button>\r\n\t\t\t\t\r\n\t\t\t\t{eventList.map((event, idx) => (\r\n\t\t\t\t\t<Card key={idx} style={styles.cardContainer}>\r\n\t\t\t\t\t\t<Card.Content style={styles.cardContent}>\r\n\t\t\t\t\t\t\t<Title>{event.title}</Title>\r\n\t\t\t\t\t\t\t<Paragraph>{event.description}</Paragraph>\r\n\t\t\t\t\t\t\t<Card.Cover\r\n\t\t\t\t\t\t\t\tstyle={styles.cardCover}\r\n\t\t\t\t\t\t\t\tsource={{ uri: `${event?.thumbnail}` }}\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t</Card.Content>\r\n\t\t\t\t\t</Card>\r\n\t\t\t\t))}\r\n\t\t\t</ScrollView>\r\n\t\t</TouchableWithoutFeedback>\r\n\t);\r\n};\r\n\r\nexport default EventSearch;\r\n"]},"metadata":{},"sourceType":"module"}