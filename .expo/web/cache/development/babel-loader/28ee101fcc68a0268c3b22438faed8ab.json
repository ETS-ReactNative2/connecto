{"ast":null,"code":"import * as React from 'react';\nimport { NavigationContainer, TabActions } from '@react-navigation/native';\nimport { createBottomTabNavigator } from '@react-navigation/bottom-tabs';\nimport Ionicons from \"@expo/vector-icons/Ionicons\";\nimport EventSearch from \"./views/EventSearch\";\nimport ProfileScreen from \"./views/ProfileScreen\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar homeName = 'Home';\nvar profileName = 'Profile';\nvar Tab = createBottomTabNavigator();\nexport default function MainContainer() {\n  return _jsx(NavigationContainer, {\n    children: _jsxs(Tab.Navigator, {\n      initialRouteName: homeName,\n      screenOptions: function screenOptions(_ref) {\n        var route = _ref.route;\n        return {\n          tabBarIcon: function tabBarIcon(_ref2) {\n            var focused = _ref2.focused,\n                color = _ref2.color,\n                size = _ref2.size;\n            var iconName;\n            var routeName = route.name;\n\n            if (routeName === homeName) {\n              iconName = focused ? 'home' : 'home-outline';\n            } else if (routeName === profileName) {\n              iconName = focused ? 'person' : 'person-outline';\n            }\n\n            return _jsx(Ionicons, {\n              name: iconName,\n              size: size,\n              color: color\n            });\n          }\n        };\n      },\n      children: [_jsx(Tab.Screen, {\n        name: homeName,\n        component: EventSearch\n      }), _jsx(Tab.Screen, {\n        name: profileName,\n        component: ProfileScreen\n      })]\n    })\n  });\n}","map":{"version":3,"sources":["C:/Users/James/Desktop/ConnectO/connecto/src/MainContainer.js"],"names":["React","NavigationContainer","TabActions","createBottomTabNavigator","Ionicons","EventSearch","ProfileScreen","homeName","profileName","Tab","MainContainer","route","tabBarIcon","focused","color","size","iconName","routeName","name"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,mBAAT,EAA8BC,UAA9B,QAAgD,0BAAhD;AACA,SAASC,wBAAT,QAAwC,+BAAxC;AACA,OAAOC,QAAP;AAEA,OAAOC,WAAP;AACA,OAAOC,aAAP;;;AAEA,IAAMC,QAAQ,GAAG,MAAjB;AACA,IAAMC,WAAW,GAAG,SAApB;AACA,IAAMC,GAAG,GAAGN,wBAAwB,EAApC;AACA,eAAe,SAASO,aAAT,GAAwB;AACnC,SACI,KAAC,mBAAD;AAAA,cACI,MAAC,GAAD,CAAK,SAAL;AACI,MAAA,gBAAgB,EAAEH,QADtB;AAEI,MAAA,aAAa,EAAE;AAAA,YAAEI,KAAF,QAAEA,KAAF;AAAA,eAAc;AACzBC,UAAAA,UAAU,EAAE,2BAA4B;AAAA,gBAA1BC,OAA0B,SAA1BA,OAA0B;AAAA,gBAAjBC,KAAiB,SAAjBA,KAAiB;AAAA,gBAAVC,IAAU,SAAVA,IAAU;AACpC,gBAAIC,QAAJ;AACA,gBAAIC,SAAS,GAAGN,KAAK,CAACO,IAAtB;;AAEA,gBAAGD,SAAS,KAAKV,QAAjB,EAA0B;AACtBS,cAAAA,QAAQ,GAAGH,OAAO,GAAG,MAAH,GAAY,cAA9B;AACH,aAFD,MAGK,IAAGI,SAAS,KAAKT,WAAjB,EAA6B;AAC9BQ,cAAAA,QAAQ,GAAGH,OAAO,GAAG,QAAH,GAAc,gBAAhC;AACH;;AAED,mBAAO,KAAC,QAAD;AAAU,cAAA,IAAI,EAAEG,QAAhB;AAA0B,cAAA,IAAI,EAAED,IAAhC;AAAsC,cAAA,KAAK,EAAED;AAA7C,cAAP;AACH;AAbwB,SAAd;AAAA,OAFnB;AAAA,iBAiBQ,KAAC,GAAD,CAAK,MAAL;AAAY,QAAA,IAAI,EAAEP,QAAlB;AAA4B,QAAA,SAAS,EAAEF;AAAvC,QAjBR,EAkBQ,KAAC,GAAD,CAAK,MAAL;AAAY,QAAA,IAAI,EAAEG,WAAlB;AAA+B,QAAA,SAAS,EAAEF;AAA1C,QAlBR;AAAA;AADJ,IADJ;AA2BH","sourcesContent":["import * as React from 'react';\r\nimport { NavigationContainer, TabActions } from '@react-navigation/native';\r\nimport { createBottomTabNavigator} from '@react-navigation/bottom-tabs';\r\nimport Ionicons from 'react-native-vector-icons/Ionicons';\r\n\r\nimport EventSearch from './views/EventSearch';\r\nimport ProfileScreen from './views/ProfileScreen';\r\n\r\nconst homeName = 'Home';\r\nconst profileName = 'Profile';\r\nconst Tab = createBottomTabNavigator();\r\nexport default function MainContainer(){\r\n    return(\r\n        <NavigationContainer>\r\n            <Tab.Navigator\r\n                initialRouteName={homeName}\r\n                screenOptions={({route}) => ({\r\n                    tabBarIcon: ({focused, color, size}) => {\r\n                        let iconName;\r\n                        let routeName = route.name;\r\n\r\n                        if(routeName === homeName){\r\n                            iconName = focused ? 'home' : 'home-outline';\r\n                        }\r\n                        else if(routeName === profileName){\r\n                            iconName = focused ? 'person' : 'person-outline'; \r\n                        }\r\n\r\n                        return <Ionicons name={iconName} size={size} color={color}/>\r\n                    },\r\n                })}>\r\n                    <Tab.Screen name={homeName} component={EventSearch}/>\r\n                    <Tab.Screen name={profileName} component={ProfileScreen}/>\r\n\r\n\r\n\r\n            </Tab.Navigator>\r\n        </NavigationContainer>\r\n    )\r\n}"]},"metadata":{},"sourceType":"module"}